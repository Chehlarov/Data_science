{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import nose.tools\n",
    "# Write your imports here"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Visualization and Exploratory Data Analysis Lab\n",
    "## Visualizing and exploring data. Data mining process as a whole"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem 1. Read the dataset (1 point)\n",
    "You'll be exploring data about people's income. Your task is to understand whether there are significant differences in the lifestyle of lower- vs. higher-income groups.\n",
    "\n",
    "Read the dataset located [here](https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data). The information file is [here](https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.names). Save it into the variable `income_data`. Change the column names to what you like. The last column is related to the income class.\n",
    "\n",
    "Get acquainted with the information file well before starting work.\n",
    "\n",
    "You don't need to clean the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "1100e6bb30ef5be00db508ca1f24d75c",
     "grade": false,
     "grade_id": "read-dataset",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>workclass</th>\n",
       "      <th>fnlwgt</th>\n",
       "      <th>education</th>\n",
       "      <th>education_num</th>\n",
       "      <th>marital_status</th>\n",
       "      <th>occupation</th>\n",
       "      <th>relationship</th>\n",
       "      <th>race</th>\n",
       "      <th>sex</th>\n",
       "      <th>capital_gain</th>\n",
       "      <th>capital_loss</th>\n",
       "      <th>hours_per_week</th>\n",
       "      <th>native_country</th>\n",
       "      <th>income_class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>39</td>\n",
       "      <td>State-gov</td>\n",
       "      <td>77516</td>\n",
       "      <td>Bachelors</td>\n",
       "      <td>13</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>Adm-clerical</td>\n",
       "      <td>Not-in-family</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>2174</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>50</td>\n",
       "      <td>Self-emp-not-inc</td>\n",
       "      <td>83311</td>\n",
       "      <td>Bachelors</td>\n",
       "      <td>13</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Exec-managerial</td>\n",
       "      <td>Husband</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38</td>\n",
       "      <td>Private</td>\n",
       "      <td>215646</td>\n",
       "      <td>HS-grad</td>\n",
       "      <td>9</td>\n",
       "      <td>Divorced</td>\n",
       "      <td>Handlers-cleaners</td>\n",
       "      <td>Not-in-family</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>53</td>\n",
       "      <td>Private</td>\n",
       "      <td>234721</td>\n",
       "      <td>11th</td>\n",
       "      <td>7</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Handlers-cleaners</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Black</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>28</td>\n",
       "      <td>Private</td>\n",
       "      <td>338409</td>\n",
       "      <td>Bachelors</td>\n",
       "      <td>13</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Prof-specialty</td>\n",
       "      <td>Wife</td>\n",
       "      <td>Black</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>Cuba</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32556</th>\n",
       "      <td>27</td>\n",
       "      <td>Private</td>\n",
       "      <td>257302</td>\n",
       "      <td>Assoc-acdm</td>\n",
       "      <td>12</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Tech-support</td>\n",
       "      <td>Wife</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32557</th>\n",
       "      <td>40</td>\n",
       "      <td>Private</td>\n",
       "      <td>154374</td>\n",
       "      <td>HS-grad</td>\n",
       "      <td>9</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Machine-op-inspct</td>\n",
       "      <td>Husband</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&gt;50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32558</th>\n",
       "      <td>58</td>\n",
       "      <td>Private</td>\n",
       "      <td>151910</td>\n",
       "      <td>HS-grad</td>\n",
       "      <td>9</td>\n",
       "      <td>Widowed</td>\n",
       "      <td>Adm-clerical</td>\n",
       "      <td>Unmarried</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32559</th>\n",
       "      <td>22</td>\n",
       "      <td>Private</td>\n",
       "      <td>201490</td>\n",
       "      <td>HS-grad</td>\n",
       "      <td>9</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>Adm-clerical</td>\n",
       "      <td>Own-child</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32560</th>\n",
       "      <td>52</td>\n",
       "      <td>Self-emp-inc</td>\n",
       "      <td>287927</td>\n",
       "      <td>HS-grad</td>\n",
       "      <td>9</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Exec-managerial</td>\n",
       "      <td>Wife</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>15024</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&gt;50K</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>32561 rows Ã— 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       age          workclass  fnlwgt    education  education_num  \\\n",
       "0       39          State-gov   77516    Bachelors             13   \n",
       "1       50   Self-emp-not-inc   83311    Bachelors             13   \n",
       "2       38            Private  215646      HS-grad              9   \n",
       "3       53            Private  234721         11th              7   \n",
       "4       28            Private  338409    Bachelors             13   \n",
       "...    ...                ...     ...          ...            ...   \n",
       "32556   27            Private  257302   Assoc-acdm             12   \n",
       "32557   40            Private  154374      HS-grad              9   \n",
       "32558   58            Private  151910      HS-grad              9   \n",
       "32559   22            Private  201490      HS-grad              9   \n",
       "32560   52       Self-emp-inc  287927      HS-grad              9   \n",
       "\n",
       "            marital_status          occupation    relationship    race  \\\n",
       "0            Never-married        Adm-clerical   Not-in-family   White   \n",
       "1       Married-civ-spouse     Exec-managerial         Husband   White   \n",
       "2                 Divorced   Handlers-cleaners   Not-in-family   White   \n",
       "3       Married-civ-spouse   Handlers-cleaners         Husband   Black   \n",
       "4       Married-civ-spouse      Prof-specialty            Wife   Black   \n",
       "...                    ...                 ...             ...     ...   \n",
       "32556   Married-civ-spouse        Tech-support            Wife   White   \n",
       "32557   Married-civ-spouse   Machine-op-inspct         Husband   White   \n",
       "32558              Widowed        Adm-clerical       Unmarried   White   \n",
       "32559        Never-married        Adm-clerical       Own-child   White   \n",
       "32560   Married-civ-spouse     Exec-managerial            Wife   White   \n",
       "\n",
       "           sex  capital_gain  capital_loss  hours_per_week  native_country  \\\n",
       "0         Male          2174             0              40   United-States   \n",
       "1         Male             0             0              13   United-States   \n",
       "2         Male             0             0              40   United-States   \n",
       "3         Male             0             0              40   United-States   \n",
       "4       Female             0             0              40            Cuba   \n",
       "...        ...           ...           ...             ...             ...   \n",
       "32556   Female             0             0              38   United-States   \n",
       "32557     Male             0             0              40   United-States   \n",
       "32558   Female             0             0              40   United-States   \n",
       "32559     Male             0             0              20   United-States   \n",
       "32560   Female         15024             0              40   United-States   \n",
       "\n",
       "      income_class  \n",
       "0            <=50K  \n",
       "1            <=50K  \n",
       "2            <=50K  \n",
       "3            <=50K  \n",
       "4            <=50K  \n",
       "...            ...  \n",
       "32556        <=50K  \n",
       "32557         >50K  \n",
       "32558        <=50K  \n",
       "32559        <=50K  \n",
       "32560         >50K  \n",
       "\n",
       "[32561 rows x 15 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "income_data = pd.read_csv(\"https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data\", header=None)\n",
    "# YOUR CODE HERE\n",
    "income_data.columns = [\"age\", \"workclass\", \"fnlwgt\", \"education\", \"education_num\",\n",
    "                       \"marital_status\", \"occupation\", \"relationship\", \"race\",\n",
    "                       \"sex\", \"capital_gain\", \"capital_loss\", \"hours_per_week\", \n",
    "                       \"native_country\", \"income_class\"\n",
    "                      ]\n",
    "income_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "income_data['occupation'] = income_data['occupation'].str.strip() # needed for the last task"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <td>32561.0</td>\n",
       "      <td>38.581647</td>\n",
       "      <td>13.640433</td>\n",
       "      <td>17.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>90.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fnlwgt</th>\n",
       "      <td>32561.0</td>\n",
       "      <td>189778.366512</td>\n",
       "      <td>105549.977697</td>\n",
       "      <td>12285.0</td>\n",
       "      <td>117827.0</td>\n",
       "      <td>178356.0</td>\n",
       "      <td>237051.0</td>\n",
       "      <td>1484705.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>education_num</th>\n",
       "      <td>32561.0</td>\n",
       "      <td>10.080679</td>\n",
       "      <td>2.572720</td>\n",
       "      <td>1.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>capital_gain</th>\n",
       "      <td>32561.0</td>\n",
       "      <td>1077.648844</td>\n",
       "      <td>7385.292085</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>99999.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>capital_loss</th>\n",
       "      <td>32561.0</td>\n",
       "      <td>87.303830</td>\n",
       "      <td>402.960219</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4356.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>hours_per_week</th>\n",
       "      <td>32561.0</td>\n",
       "      <td>40.437456</td>\n",
       "      <td>12.347429</td>\n",
       "      <td>1.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>99.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  count           mean            std      min       25%  \\\n",
       "age             32561.0      38.581647      13.640433     17.0      28.0   \n",
       "fnlwgt          32561.0  189778.366512  105549.977697  12285.0  117827.0   \n",
       "education_num   32561.0      10.080679       2.572720      1.0       9.0   \n",
       "capital_gain    32561.0    1077.648844    7385.292085      0.0       0.0   \n",
       "capital_loss    32561.0      87.303830     402.960219      0.0       0.0   \n",
       "hours_per_week  32561.0      40.437456      12.347429      1.0      40.0   \n",
       "\n",
       "                     50%       75%        max  \n",
       "age                 37.0      48.0       90.0  \n",
       "fnlwgt          178356.0  237051.0  1484705.0  \n",
       "education_num       10.0      12.0       16.0  \n",
       "capital_gain         0.0       0.0    99999.0  \n",
       "capital_loss         0.0       0.0     4356.0  \n",
       "hours_per_week      40.0      45.0       99.0  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "income_data.describe().T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "6f1acd92663c630ea7be4ae6a4f4b1a3",
     "grade": true,
     "grade_id": "read-dataset-tests",
     "locked": true,
     "points": 1,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "nose.tools.assert_is_not_none(income_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem 2. High income (1 point)\n",
    "How many people have high income (over 50 000 USD per year)? Write a function to return the value. The function should accept the dataframe as a parameter. Work with that parameter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([' <=50K', ' >50K'], dtype=object)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "income_data.income_class.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "2e3a3eb52f23b84701cddd0c71c1a443",
     "grade": false,
     "grade_id": "high-income",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "def get_num_people_with_high_income(dataframe):\n",
    "    # YOUR CODE HERE\n",
    "    return dataframe[dataframe.income_class == \" >50K\"][\"income_class\"].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7841"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_num_people_with_high_income(income_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get_num_people_with_high_income(income_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "e6284216dc88e4a433035553084c42ab",
     "grade": true,
     "grade_id": "high-income-tests",
     "locked": true,
     "points": 1,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "# This cell contains hidden tests"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem 3. Capital gain: thresholding (1 point)\n",
    "Plot a histogram of the capital gain. You can see that there are many people with relatively low gains and a few people - with very high gains."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "5c1843e15f32b6f2a8ba19bd9f237a43",
     "grade": false,
     "grade_id": "high-gain",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# YOUR CODE HERE\n",
    "plt.hist(income_data.capital_gain, bins=20)\n",
    "plt.ylabel(\"count\")\n",
    "plt.xlabel(\"capital gain\")\n",
    "plt.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a function which accepts a dataframe and a capital gain value (in USD) and returns how many people are there with **greater than or equal to** that threshold gain."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "1a4b91174558f18a2c8aa05349124a42",
     "grade": false,
     "grade_id": "high-gain-fn",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "def get_num_people_with_higher_gain(dataframe, threshold_gain):\n",
    "    # YOUR CODE HERE\n",
    "    return dataframe[dataframe.capital_gain >= threshold_gain][\"capital_gain\"].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get_num_people_with_higher_gain(income_data, 10000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "f95e3ca5c5cf7af82ba098cc4505060b",
     "grade": true,
     "grade_id": "high-gain-tests",
     "locked": true,
     "points": 1,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "nose.tools.assert_equal(get_num_people_with_higher_gain(income_data, 60000), 159)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create a pie chart of the number of people by marital status."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "3f7c991513f38ee3e685493f9196a269",
     "grade": false,
     "grade_id": "cell-1e91969a128f0bd6",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# YOUR CODE HERE\n",
    "marital_status_count = income_data.groupby(\"marital_status\")[\"marital_status\"].count()\n",
    "plt.pie(marital_status_count, labels=marital_status_count.keys())\n",
    "plt.title(\"number of people by marital status\")\n",
    "plt.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem 4. Marital status (2 points)\n",
    "Which type of marital status is the most prominent (i.e. has the most people)? How many are there? Write a function that **calculates and returns the two answers**. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# marital_status_stats = income_data.groupby(\"marital_status\")[\"marital_status\"].count()\n",
    "# marital_status_stats.idxmax()\n",
    "# marital_status_stats.filter(lambda x: x['marital_status'].count() == \"Divorced\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "e9966cb2920b04c4df332da313f4e508",
     "grade": false,
     "grade_id": "cell-5c9a472102a7b452",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "def most_prominent_marital_status(dataframe):\n",
    "    status = \"\"\n",
    "    num_people = 0\n",
    "    # YOUR CODE HERE\n",
    "    group = dataframe.groupby(\"marital_status\")[\"marital_status\"]\n",
    "    \n",
    "    num_people = group.count().max()\n",
    "    status = group.count().idxmax()\n",
    "    return (status, num_people)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(' Married-civ-spouse', 14976)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "most_prominent_marital_status(income_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "a2ef87117dcbc8db2d43cf9e9883c695",
     "grade": true,
     "grade_id": "cell-0077a3c8d4339ad7",
     "locked": true,
     "points": 2,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "(status, num_people) = most_prominent_marital_status(income_data)\n",
    "nose.tools.assert_not_equal(status, \"\")\n",
    "nose.tools.assert_greater(num_people, 10000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem 5. Age groups (1 point)\n",
    "Create a histogram of all people's ages. Use the default settings. Add the label \"Age\" on the x-axis and \"Count\" on the y-axis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "60c6510ffb115c08ab7fed3b29a27465",
     "grade": false,
     "grade_id": "cell-3ba52bf669280861",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYsAAAEGCAYAAACUzrmNAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8vihELAAAACXBIWXMAAAsTAAALEwEAmpwYAAAVoklEQVR4nO3df6zd9X3f8ecrJhBCQgPBIM9mNdGsJMDGL5c5oYqS0BUvRIG2oTJahjOxWmKsI23V1qzapmiyRKSqSqkGGyIpps2CnF/FhZLEc0K2TghySaBgwMMKDng4+IaoDWklMsh7f5yPy4l98OcC99xzrv18SEff7/d9vp9z3vdi8/L38/2e70lVIUnSobxu0g1IkqafYSFJ6jIsJEldhoUkqcuwkCR1HTXpBsblpJNOqpUrV066DUlaVO6///7vV9XSA+uHbVisXLmSmZmZSbchSYtKku+OqjsNJUnqMiwkSV2GhSSpy7CQJHUZFpKkLsNCktRlWEiSugwLSVKXYSFJ6jpsP8GtxWHlxjsn9t67r7t4Yu8tLTYeWUiSusYaFknekuTzSR5L8miSdyU5Mcm2JI+35QlD+1+bZFeSnUkuGqqfl+Sh9tz1STLOviVJP23cRxZ/CHy5qt4BnAU8CmwEtlfVKmB72ybJ6cA64AxgLXBDkiXtdW4ENgCr2mPtmPuWJA0Z2zmLJMcD7wE+ClBVPwZ+nOQS4L1tt83A3cDvApcAt1XV88ATSXYB5yfZDRxfVfe0170VuBS4a1y9H4kmee5A0vQb55HF24BZ4I+TfDvJzUmOA06pqr0AbXly23858NTQ+D2ttrytH1g/SJINSWaSzMzOzs7vTyNJR7BxhsVRwLnAjVV1DvC3tCmnlzHqPEQdon5wseqmqlpdVauXLj3ouzskSa/SOMNiD7Cnqu5t259nEB7PJFkG0Jb7hvY/dWj8CuDpVl8xoi5JWiBjC4uq+h7wVJK3t9KFwCPAVmB9q60Hbm/rW4F1SY5JchqDE9n3tamq55KsaVdBXTE0RpK0AMb9obxfBz6T5GjgO8C/YhBQW5JcCTwJXAZQVTuSbGEQKC8AV1fVi+11rgJuAY5lcGL7sDy57UlmSdNqrGFRVQ8Aq0c8deHL7L8J2DSiPgOcOa/NSZLmzE9wS5K6DAtJUpdhIUnqMiwkSV2GhSSpy7CQJHUZFpKkLsNCktRlWEiSuvwO7hG87YYk/TSPLCRJXYaFJKnLsJAkdRkWkqQuw0KS1GVYSJK6DAtJUpdhIUnqMiwkSV2GhSSpy7CQJHUZFpKkLsNCktRlWEiSugwLSVLXWMMiye4kDyV5IMlMq52YZFuSx9vyhKH9r02yK8nOJBcN1c9rr7MryfVJMs6+JUk/bSGOLN5XVWdX1eq2vRHYXlWrgO1tmySnA+uAM4C1wA1JlrQxNwIbgFXtsXYB+pYkNZOYhroE2NzWNwOXDtVvq6rnq+oJYBdwfpJlwPFVdU9VFXDr0BhJ0gIYd1gU8NUk9yfZ0GqnVNVegLY8udWXA08Njd3Tasvb+oH1gyTZkGQmyczs7Ow8/hiSdGQb93dwX1BVTyc5GdiW5LFD7DvqPEQdon5wseom4CaA1atXj9xHkvTKjfXIoqqebst9wJeA84Fn2tQSbbmv7b4HOHVo+Arg6VZfMaIuSVogYwuLJMclefP+deAXgYeBrcD6ttt64Pa2vhVYl+SYJKcxOJF9X5uqei7JmnYV1BVDYyRJC2Cc01CnAF9qV7keBfz3qvpykm8CW5JcCTwJXAZQVTuSbAEeAV4Arq6qF9trXQXcAhwL3NUekqQFMrawqKrvAGeNqD8LXPgyYzYBm0bUZ4Az57tHSdLc+AluSVKXYSFJ6jIsJEldhoUkqcuwkCR1GRaSpC7DQpLUZVhIkroMC0lSl2EhSeoyLCRJXYaFJKnLsJAkdRkWkqQuw0KS1GVYSJK6DAtJUpdhIUnqMiwkSV2GhSSpy7CQJHUZFpKkLsNCktRlWEiSusYeFkmWJPl2kjva9olJtiV5vC1PGNr32iS7kuxMctFQ/bwkD7Xnrk+ScfctSXrJQhxZXAM8OrS9EdheVauA7W2bJKcD64AzgLXADUmWtDE3AhuAVe2xdgH6liQ1Yw2LJCuAi4Gbh8qXAJvb+mbg0qH6bVX1fFU9AewCzk+yDDi+qu6pqgJuHRojSVoA4z6y+CTwO8BPhmqnVNVegLY8udWXA08N7ben1Za39QPrB0myIclMkpnZ2dl5+QEkSWMMiyQfBPZV1f1zHTKiVoeoH1ysuqmqVlfV6qVLl87xbSVJPUeN8bUvAD6U5APAG4Djk/wp8EySZVW1t00x7Wv77wFOHRq/Ani61VeMqEuvycqNd07kfXdfd/FE3ld6LcZ2ZFFV11bViqpayeDE9deq6iPAVmB92209cHtb3wqsS3JMktMYnMi+r01VPZdkTbsK6oqhMZKkBTDOI4uXcx2wJcmVwJPAZQBVtSPJFuAR4AXg6qp6sY25CrgFOBa4qz0kSQtkQcKiqu4G7m7rzwIXvsx+m4BNI+ozwJnj61CSdCh+gluS1GVYSJK6DAtJUpdhIUnqMiwkSV2GhSSpy7CQJHUZFpKkrjmFRZIL5lKTJB2e5npk8UdzrEmSDkOHvN1HkncB7waWJvnNoaeOB5aMHiVJOtz07g11NPCmtt+bh+o/BD48rqYkSdPlkGFRVd8AvpHklqr67gL1JEmaMnO96+wxSW4CVg6Pqar3j6MpSdJ0mWtYfA74r8DNwIudfSVJh5m5hsULVXXjWDuRJE2tuV46++dJ/k2SZUlO3P8Ya2eSpKkx1yOL/d+Z/dtDtQLeNr/tSJKm0ZzCoqpOG3cjkqTpNaewSHLFqHpV3Tq/7UiSptFcp6F+bmj9DcCFwLcAw0KSjgBznYb69eHtJD8D/MlYOpIkTZ1Xe4vyvwNWzWcjkqTpNddzFn/O4OonGNxA8J3AlnE1JUmaLnM9Z/H7Q+svAN+tqj1j6EeSNIXmNA3Vbij4GIM7z54A/Lg3JskbktyX5MEkO5J8vNVPTLItyeNtecLQmGuT7EqyM8lFQ/XzkjzUnrs+SV7pDypJevXm+k15vwrcB1wG/Cpwb5LeLcqfB95fVWcBZwNrk6wBNgLbq2oVsL1tk+R0YB1wBrAWuCHJ/u/MuBHYwOA8yar2vCRpgcx1Gur3gJ+rqn0ASZYC/wP4/MsNqKoCftQ2X98eBVwCvLfVNwN3A7/b6rdV1fPAE0l2Aecn2Q0cX1X3tPe+FbgUuGuOvUuSXqO5Xg31uv1B0Tw7l7FJliR5ANgHbKuqe4FTqmovQFue3HZfDjw1NHxPqy1v6wfWR73fhiQzSWZmZ2fn9INJkvrmGhZfTvKVJB9N8lHgTuAveoOq6sWqOhtYweAo4cxD7D7qPEQdoj7q/W6qqtVVtXrp0qW99iRJc9T7Du5/xOBI4LeT/DLw8wz+530P8Jm5vklV/XWSuxmca3gmybKq2ptkGYOjDhgcMZw6NGwF8HSrrxhRlyQtkN6RxSeB5wCq6otV9ZtV9RsMjio+eaiBSZYmeUtbPxb4BQZXVG3lpbvYrgdub+tbgXVJjklyGoMT2fe1qarnkqxpV0FdMTRGkrQAeie4V1bVXx1YrKqZJCs7Y5cBm9sVTa8DtlTVHUnuAbYkuRJ4ksEVVlTVjiRbgEcYfJbj6qra/618VwG3AMcyOLHtyW1JWkC9sHjDIZ479lADW8icM6L+LIMbEY4aswnYNKI+AxzqfIckaYx601DfTPJrBxbbUcH942lJkjRtekcWHwO+lORf8FI4rAaOBn5pjH1JkqbIIcOiqp4B3p3kfbw0DXRnVX1t7J1JkqbGXL/P4uvA18fciyRpSr3a77OQJB1BDAtJUpdhIUnqMiwkSV1zvUW5pHmycuOdE3vv3dddPLH31uLmkYUkqcuwkCR1GRaSpC7DQpLUZVhIkroMC0lSl2EhSeoyLCRJXYaFJKnLsJAkdRkWkqQuw0KS1GVYSJK6DAtJUpdhIUnqGltYJDk1ydeTPJpkR5JrWv3EJNuSPN6WJwyNuTbJriQ7k1w0VD8vyUPtueuTZFx9S5IONs4jixeA36qqdwJrgKuTnA5sBLZX1Spge9umPbcOOANYC9yQZEl7rRuBDcCq9lg7xr4lSQcYW1hU1d6q+lZbfw54FFgOXAJsbrttBi5t65cAt1XV81X1BLALOD/JMuD4qrqnqgq4dWiMJGkBLMg5iyQrgXOAe4FTqmovDAIFOLntthx4amjYnlZb3tYPrEuSFsjYwyLJm4AvAB+rqh8eatcRtTpEfdR7bUgyk2Rmdnb2lTcrSRpprGGR5PUMguIzVfXFVn6mTS3RlvtafQ9w6tDwFcDTrb5iRP0gVXVTVa2uqtVLly6dvx9Eko5w47waKsCngEer6g+GntoKrG/r64Hbh+rrkhyT5DQGJ7Lva1NVzyVZ017ziqExkqQFcNQYX/sC4F8CDyV5oNX+PXAdsCXJlcCTwGUAVbUjyRbgEQZXUl1dVS+2cVcBtwDHAne1hyRpgYwtLKrqLxl9vgHgwpcZswnYNKI+A5w5f91Jkl4JP8EtSeoyLCRJXYaFJKnLsJAkdRkWkqQuw0KS1GVYSJK6DAtJUtc4P8Etacqs3HjnRN5393UXT+R9NX88spAkdRkWkqQuw0KS1GVYSJK6DAtJUpdhIUnqMiwkSV2GhSSpy7CQJHUZFpKkLsNCktRlWEiSugwLSVKXYSFJ6jIsJEldhoUkqWtsYZHk00n2JXl4qHZikm1JHm/LE4aeuzbJriQ7k1w0VD8vyUPtueuTZFw9S5JGG+eRxS3A2gNqG4HtVbUK2N62SXI6sA44o425IcmSNuZGYAOwqj0OfE1J0piNLSyq6n8CPzigfAmwua1vBi4dqt9WVc9X1RPALuD8JMuA46vqnqoq4NahMZKkBbLQ5yxOqaq9AG15cqsvB54a2m9Pqy1v6wfWR0qyIclMkpnZ2dl5bVySjmTTcoJ71HmIOkR9pKq6qapWV9XqpUuXzltzknSkW+iweKZNLdGW+1p9D3Dq0H4rgKdbfcWIuiRpAS10WGwF1rf19cDtQ/V1SY5JchqDE9n3tamq55KsaVdBXTE0RpK0QI4a1wsn+SzwXuCkJHuA/wRcB2xJciXwJHAZQFXtSLIFeAR4Abi6ql5sL3UVgyurjgXuag9J0gIaW1hU1eUv89SFL7P/JmDTiPoMcOY8tiZJeoWm5QS3JGmKGRaSpC7DQpLUZVhIkroMC0lSl2EhSeoyLCRJXYaFJKnLsJAkdRkWkqQuw0KS1DW2e0NJ0n4rN945kffdfd3FE3nfw5FHFpKkLsNCktRlWEiSugwLSVKXYSFJ6jIsJEldhoUkqcuwkCR1GRaSpC7DQpLU5e0+JB22JnWbETj8bjXikYUkqcuwkCR1LZqwSLI2yc4ku5JsnHQ/knQkWRTnLJIsAf4L8M+APcA3k2ytqkcm25kkjXa43ZZ9sRxZnA/sqqrvVNWPgduASybckyQdMRbFkQWwHHhqaHsP8E8P3CnJBmBD2/xRkp0L0BvAScD3F+i9Xgv7nF+Loc/F0CPY57zJJ15zjz87qrhYwiIjanVQoeom4Kbxt/PTksxU1eqFft9Xyj7n12LoczH0CPY5n8bV42KZhtoDnDq0vQJ4ekK9SNIRZ7GExTeBVUlOS3I0sA7YOuGeJOmIsSimoarqhST/FvgKsAT4dFXtmHBbwxZ86utVss/5tRj6XAw9gn3Op7H0mKqDpv4lSfopi2UaSpI0QYaFJKnLsHiFkpya5OtJHk2yI8k1rX5ikm1JHm/LEybY4xuS3Jfkwdbjx6etx2FJliT5dpI72vbU9Zlkd5KHkjyQZGaK+3xLks8neaz9GX3XNPWZ5O3td7j/8cMkH5umHod6/Y329+fhJJ9tf6+msc9rWo87knys1ea9T8PilXsB+K2qeiewBrg6yenARmB7Va0CtrftSXkeeH9VnQWcDaxNsobp6nHYNcCjQ9vT2uf7qursoWvYp7HPPwS+XFXvAM5i8Hudmj6ramf7HZ4NnAf8HfClaeoRIMly4N8Bq6vqTAYX1qxj+vo8E/g1Bne5OAv4YJJVjKPPqvLxGh7A7QzuWbUTWNZqy4Cdk+6t9fJG4FsMPvE+dT0y+MzMduD9wB2tNo197gZOOqA2VX0CxwNP0C5cmdY+h/r6ReB/T2OPvHTXiBMZXDV6R+t32vq8DLh5aPs/AL8zjj49sngNkqwEzgHuBU6pqr0AbXnyBFvbP7XzALAP2FZVU9dj80kGf7h/MlSbxj4L+GqS+9ttZWD6+nwbMAv8cZvWuznJcUxfn/utAz7b1qeqx6r6v8DvA08Ce4G/qaqvMmV9Ag8D70ny1iRvBD7A4APM896nYfEqJXkT8AXgY1X1w0n3c6CqerEGh/orgPPb4epUSfJBYF9V3T/pXubggqo6F/jnDKYe3zPphkY4CjgXuLGqzgH+lumYGjtI+3Dth4DPTbqXUdoc/yXAacA/AI5L8pHJdnWwqnoU+ASwDfgy8CCDqfJ5Z1i8CklezyAoPlNVX2zlZ5Isa88vY/Av+omrqr8G7gbWMn09XgB8KMluBncSfn+SP2X6+qSqnm7LfQzm2M9n+vrcA+xpR5EAn2cQHtPWJwxC91tV9UzbnrYefwF4oqpmq+r/AV8E3s309UlVfaqqzq2q9wA/AB5nDH0aFq9QkgCfAh6tqj8YemorsL6tr2dwLmMikixN8pa2fiyDP/iPMUU9AlTVtVW1oqpWMpiS+FpVfYQp6zPJcUnevH+dwdz1w0xZn1X1PeCpJG9vpQuBR5iyPpvLeWkKCqavxyeBNUne2P7OX8jgYoFp65MkJ7flPwR+mcHvdf77nOTJmcX4AH6ewfz1XwEPtMcHgLcyOFH7eFueOMEe/wnw7dbjw8B/bPWp6XFEz+/lpRPcU9Ung3MBD7bHDuD3prHP1tPZwEz7b/9nwAnT1ieDiy6eBX5mqDZVPbaePs7gH1kPA38CHDOlff4vBv8oeBC4cFy/T2/3IUnqchpKktRlWEiSugwLSVKXYSFJ6jIsJEldhoU0z5L8UpJK8o5J9yLNF8NCmn+XA3/J4IOG0mHBsJDmUbtn2AXAlbSwSPK6JDe07xu4I8lfJPlwe+68JN9oNyj8yv5bNEjTxrCQ5telDL5P4v8AP0hyLoNbMKwE/jHwr4F3wd/fY+yPgA9X1XnAp4FNE+hZ6jpq0g1Ih5nLGdx2HQY3R7wceD3wuar6CfC9JF9vz78dOBPYNrj9EEsY3A5bmjqGhTRPkryVwZc4nZmkGPzPvxjcpXbkEGBHVb1rgVqUXjWnoaT582Hg1qr62apaWVWnMvjmuu8Dv9LOXZzC4KaJMPg2s6VJ/n5aKskZk2hc6jEspPlzOQcfRXyBwZfn7GFw99L/xuCbFf+mqn7MIGA+keRBBncwfveCdSu9At51VloASd5UVT9qU1X3Mfjmve9Nui9prjxnIS2MO9oXUh0N/GeDQouNRxaSpC7PWUiSugwLSVKXYSFJ6jIsJEldhoUkqev/A5LxF7RUuD5QAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# YOUR CODE HERE\n",
    "plt.hist(income_data.age)\n",
    "plt.xlabel(\"Age\")\n",
    "plt.ylabel(\"Count\")\n",
    "plt.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's get another view of the data. Split the ages into three:\n",
    "1. Young people: $\\text{age} \\le 30$\n",
    "2. Middle-aged people: $30 < \\text{age} \\le 60$\n",
    "3. Old people: $60 < \\text{age}$\n",
    "\n",
    "Return the counts in the following function. Which age group has the most people? How many are there?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "03420d0fea2b98e57aa98b9b5f483b86",
     "grade": false,
     "grade_id": "cell-b8a6cda122bf0fb3",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "def get_num_people_by_age_category(dataframe):\n",
    "    young, middle_aged, old = (0, 0, 0)\n",
    "    # YOUR CODE HERE\n",
    "    young = dataframe[dataframe.age <= 30][\"age\"].count()\n",
    "    middle_aged = dataframe[(30 < dataframe.age) & (dataframe.age <= 60)][\"age\"].count()\n",
    "    old = dataframe[dataframe.age > 60][\"age\"].count()\n",
    "    \n",
    "    return young, middle_aged, old"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10572, 19657, 2332)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_num_people_by_age_category(income_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The middle-aged groups is the largest; it contains 19657 members."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "79117a39e1c6066eece95309ce45dc81",
     "grade": true,
     "grade_id": "cell-17898d5f42dd42d5",
     "locked": true,
     "points": 1,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "young, middle_aged, old = get_num_people_by_age_category(income_data)\n",
    "nose.tools.assert_greater(young, 0)\n",
    "nose.tools.assert_greater(middle_aged, 0)\n",
    "nose.tools.assert_greater(old, 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can create a bar chart. Execute the code below to see it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title(\"Distribution of people by age groups\")\n",
    "plt.bar(range(3), [young, middle_aged, old])\n",
    "plt.xticks(range(3), [\"Young\", \"Middle-aged\", \"Old\"])\n",
    "plt.ylabel(\"Count\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem 6. Native country (2 points)\n",
    "Have a look at the native country of the people. The highest number of people are, as expected, from the US. What country makes for **the second highest** number of people? How many are they? Write a function to **calculate** and return the answer given a dataframe. DO NOT hardcode the answer, e.g. `return \"Germany\"`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "f48b741de66aedff2d878c5bcaf010cf",
     "grade": false,
     "grade_id": "cell-96faf6efe52dd3d0",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "def get_second_highest_num_people(dataframe):\n",
    "    num_people, country = 0, \"\"\n",
    "    # YOUR CODE HERE\n",
    "    gr = dataframe.groupby(\"native_country\").count()\n",
    "    counts = gr.apply(lambda x: x.sort_values(ascending=False))\n",
    "    \n",
    "    country = counts.index[1]\n",
    "    num_people = counts.iloc[1].age\n",
    "    return num_people, country"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "d5981b1108063667383480f69588bdf6",
     "grade": true,
     "grade_id": "cell-923d941301d6acc8",
     "locked": true,
     "points": 2,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "num_people, country = get_second_highest_num_people(income_data)\n",
    "nose.tools.assert_greater(num_people, 0)\n",
    "nose.tools.assert_not_equal(country, \"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem 7. Busiest occupations (2 points)\n",
    "Which people are most overworked? Group all data by occupation and calculate the mean hours per week for each group.\n",
    "\n",
    "Write a function that **calculates and returns** all mean hours per week as a `Series`. Sort the results in descending order (most hours to fewest hours)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "# res = income_data.groupby(\"occupation\")[\"hours_per_week\"].mean().sort_values(ascending=False)\n",
    "# res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "8800a118285464a703ef223c058dc869",
     "grade": false,
     "grade_id": "cell-f93bf9800cb3bc46",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "def get_mean_working_hours_by_income(dataframe):\n",
    "    # YOUR CODE HERE\n",
    "    return dataframe.groupby(\"occupation\")[\"hours_per_week\"].mean().sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "95d5a2c122057fb62658d0d3602436bc",
     "grade": true,
     "grade_id": "cell-69cd7b7f6076b0ed",
     "locked": true,
     "points": 2,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "occupation\n",
      "Farming-fishing      46.989940\n",
      "Exec-managerial      44.987703\n",
      "Transport-moving     44.656230\n",
      "Protective-serv      42.870570\n",
      "Prof-specialty       42.386715\n",
      "Craft-repair         42.304221\n",
      "Sales                40.781096\n",
      "Machine-op-inspct    40.755744\n",
      "Armed-Forces         40.666667\n",
      "Tech-support         39.432112\n",
      "Handlers-cleaners    37.947445\n",
      "Adm-clerical         37.558355\n",
      "Other-service        34.701669\n",
      "Priv-house-serv      32.885906\n",
      "?                    31.906131\n",
      "Name: hours_per_week, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "hours = get_mean_working_hours_by_income(income_data)\n",
    "print(hours)\n",
    "nose.tools.assert_almost_equal(hours[\"Handlers-cleaners\"], 37.95, delta = 0.01)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, let's plot a bar chart. Check the values carefully. If your do not match, feel free to edit the chart generation code below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (10, 6))\n",
    "plt.title(\"Weekly hours by occupation\")\n",
    "plt.barh(range(len(hours)), hours)\n",
    "plt.yticks(list(range(len(hours))), hours.index)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
